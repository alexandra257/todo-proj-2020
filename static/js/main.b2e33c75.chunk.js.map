{"version":3,"sources":["components/headers/Title.js","components/headers/Time.js","components/task/TaskCount.js","components/task/Task.js","components/task/TaskList.js","components/task/AddTask.js","App.js","serviceWorker.js","index.js"],"names":["title","className","style","fontFamily","fontSize","fontWeight","moment","require","format","Time","date","now","useState","time","setTime","setInterval","newTime","textAlign","TaskCount","this","props","taskCount","React","Component","Task","getStyle","background","padding","marginTop","marginBottom","borderBottom","textDecoration","item","completed","color","compButtonStyle","deleteClicked","deleteTaskFunc","taskID","doneClicked","completedTaskFunc","starTaskClick","starTaskFunc","console","log","DeleteButton","styled","DeleteForeverIcon","IconButton","aria-label","description","onClick","TaskList","taskCollection","map","taskItem","key","AddTask","state","taskDescription","addTask","addTaskFunc","taskDescriptionChanged","event","setState","target","value","type","placeholder","onChange","App","tasks","componentDidMount","axios","get","then","response","data","catch","error","taskToAdd","user_id","post","taskId","task","currentTasks","push","completeTask","put","taskCompleted","i","length","deleteTask","delete","updatedTasks","filter","Title","starTask","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b2e33c75.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction title() {\n  const heading = {\n    fontFamily: \"Dancing Script\",\n    fontSize: \"88px\",\n    fontWeight: \"normal\",\n  };\n  return (\n    <div className=\"row\" style={heading}>\n      lotus flow\n    </div>\n  );\n}\n\nexport default title;\n","import React, { useState } from \"react\";\n//\nvar moment = require(\"moment\");\nmoment().format();\n\nfunction Time() {\n  const timeStyle = {\n    fontFamily: \"Dancing Script\",\n    fontSize: \"30px\",\n    textAlign: \"right\",\n  };\n\n  const dateStyle = {\n    fontFamily: \"Dancing Script\",\n    fontSize: \"40px\",\n    textAlign: \"right\",\n    fontWeight: \"normal\",\n  };\n\n  const date = moment().format(\"MMMM Do YYYY\");\n  const now = moment().format(\"h:mm a\");\n\n  const [time, setTime] = useState(now);\n  //this is the function that will update the inital value of the initial state\n  function updateTime() {\n    const newTime = moment().format(\"h:mm a\"); //this will allow us to call a new updated time\n    setTime(newTime); //this is the function we delcared would update our state in the destructured array\n  }\n\n  setInterval(updateTime, 1000);\n\n  return (\n    <div>\n      <p style={timeStyle}>{time}</p>\n      <p style={dateStyle}>{date}</p>\n    </div>\n  );\n}\n\nexport default Time;\n","import React from \"react\";\nimport \"./Task.css\";\n\nclass TaskCount extends React.Component {\n  render() {\n    if (this.props.taskCount === 0) {\n      return (\n        <h3 className=\"m-3 pt-2\">\n          Congrats, you can relax! There are no tasks to do.\n        </h3>\n      );\n    } else {\n      return (\n        <div className=\"m-3 pt-2\">\n          <h3>Tasks left: {this.props.taskCount}</h3>\n        </div>\n      );\n    }\n\n    // return (\n\n    //   { areThereTasks }\n    // );\n  }\n}\n\nexport default TaskCount;\n","import React from \"react\";\nimport \"./Task.css\";\nimport { styled } from \"@material-ui/core/styles\";\nimport { IconButton } from \"@material-ui/core\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\nimport AssignmentTurnedInIcon from \"@material-ui/icons/AssignmentTurnedIn\";\nimport StarIcon from \"@material-ui/icons/Star\";\n\nclass Task extends React.Component {\n  getStyle = () => {\n    //setting generic styling of each task\n    return {\n      background: \"white\",\n      padding: \"10px\",\n      marginTop: \"10px\",\n      marginBottom: \"10px\",\n      borderBottom: \"1px #ccc solid\",\n      // -----------  CONDITIONAL STYLING  -----------\n      textDecoration: this.props.item.completed ? \"line-through\" : \"none\", // if the task is completed, strike through\n      color: this.props.item.completed ? \"#5b8c5a\" : \"grey\", // if task.completed is true in state, turn text green\n    };\n  };\n\n  compButtonStyle = () => {\n    return {\n      color: this.props.item.completed ? \"#5b8c5a\" : \"grey\", // if task.completed is true in state, turn icon green\n    };\n  };\n\n  //no column in database yet\n  // starButtonStyle = () => {\n  //   return {\n  //     color: this.props.task.starred ? \"#feb72b\" : \"grey\", // if task.starred is true in state, turn icon yellow\n  //   };\n  // };\n\n  deleteClicked = () => {\n    this.props.deleteTaskFunc(this.props.item.taskID);\n  };\n\n  doneClicked = () => {\n    this.props.completedTaskFunc(this.props.item.taskID);\n  };\n\n  starTaskClick = () => {\n    this.props.starTaskFunc(this.props.item.taskID);\n    console.log(\"star was clicked\");\n  };\n\n  render() {\n    const DeleteButton = styled(DeleteForeverIcon)({\n      color: \"#FE6B8B\", // set colour of delete icon to red\n    });\n\n    return (\n      <div className=\"row mx-auto rounded\" style={this.getStyle()}>\n        <IconButton\n          className=\"col-1 d-flex align-self-left\"\n          aria-label=\"star\"\n          // onClick={() => this.starTaskClick}\n        >\n          <StarIcon />\n        </IconButton>\n\n        <div className=\"col-9 d-flex align-self-center\">\n          {this.props.item.description}\n        </div>\n\n        <IconButton\n          className=\"col-1 d-flex align-self-right\"\n          aria-label=\"tick\"\n          onClick={() => this.doneClicked()} // calling markComplete when the relevant icon is clicked & passing the id of the selected task up to it in app.js\n        >\n          {/* applying conditional styling to the completed icon defined above */}\n          <AssignmentTurnedInIcon style={this.compButtonStyle()} />\n        </IconButton>\n\n        <IconButton\n          className=\"col-1 d-flex align-self-right\"\n          aria-label=\"bin\"\n          onClick={() => this.deleteClicked()} // calling markDelete when the relevant icon is clicked & passing the id of the selected task up to it in app.js\n        >\n          <DeleteButton />\n        </IconButton>\n      </div>\n    );\n  }\n}\n\n//   }\n// }\n\nexport default Task;\n","import React from \"react\";\nimport \"./Task.css\";\nimport Task from \"./Task\";\n\nclass TaskList extends React.Component {\n  render() {\n    return (\n      <div className=\"col mb-4 rounded task-box\">\n        {this.props.taskCollection.map((taskItem) => (\n          <Task\n            item={taskItem}\n            key={taskItem.taskID}\n            deleteTaskFunc={this.props.deleteTaskFunc}\n            completedTaskFunc={this.props.completedTaskFunc}\n            starTaskFunc={this.props.starTaskFunc}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default TaskList;\n","import React from \"react\";\nimport \"./Task.css\";\n\nclass AddTask extends React.Component {\n  state = {\n    taskDescription: \"Enter your task...\",\n  };\n\n  addTask = () => {\n    this.props.addTaskFunc(this.state.taskDescription);\n  };\n\n  taskDescriptionChanged = (event) => {\n    this.setState({\n      taskDescription: event.target.value,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <h3 className=\"ml-1 mb-3\">Add a task: </h3>\n        <div className=\"input-group mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Enter your task here\"\n            onChange={this.taskDescriptionChanged}\n          />\n          <div className=\"input-group-append\">\n            <button\n              className=\"btn btn-outline-primary\"\n              type=\"button\"\n              onClick={this.addTask}\n            >\n              Add\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AddTask;\n","import React from \"react\";\nimport \"./App.css\";\nimport Title from \"./components/headers/Title\";\nimport Time from \"./components/headers/Time\";\nimport TaskCount from \"./components/task/TaskCount\";\nimport TaskList from \"./components/task/TaskList\";\nimport AddTask from \"./components/task/AddTask\";\nimport axios from \"axios\";\n\nclass App extends React.Component {\n  state = {\n    tasks: [],\n  };\n\n  //this function will fire when the component loads on the screen\n  //this can be used in any component\n  componentDidMount = () => {\n    axios\n      .get(\"https://oabkodhmw0.execute-api.eu-west-2.amazonaws.com/dev/tasks\")\n      .then((response) => {\n        // if get request is successful, then respond with the tasks (then is a promise)\n        this.setState({\n          tasks: response.data.tasks,\n        });\n      })\n      //catch method returns a promise, dealing with rejected cases only.\n      .catch((error) => {\n        console.error(error); //log out the error thrown\n      });\n  };\n\n  //when a task is added to our list, addTask fires a POST request\n  addTask = (taskDescription) => {\n    const taskToAdd = {\n      //no taskID needed because we generate it using uuid in the backend\n      description: taskDescription,\n      completed: 0,\n      user_id: \"7096d2b7-e612-4b44-a9e2-8e29fc9bed69\",\n    };\n\n    //uses the same endpoint as a get request\n    axios\n      .post(\n        \"https://oabkodhmw0.execute-api.eu-west-2.amazonaws.com/dev/tasks\",\n        taskToAdd\n      )\n      .then((response) => {\n        //tells the front end what the taskID is of the task that gets saved\n        taskToAdd.taskId = response.data.task.taskID;\n        console.log(taskToAdd);\n\n        const currentTasks = this.state.tasks; //get current list of tasks from state\n        currentTasks.push(taskToAdd); //add the new task object onto the end of the array of tasks\n\n        this.setState({\n          tasks: currentTasks,\n        });\n      })\n\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  completeTask = (taskId) => {\n    const taskCompleted = { completed: 1 };\n\n    axios\n      .put(\n        `https://oabkodhmw0.execute-api.eu-west-2.amazonaws.com/dev/tasks/${taskId}`,\n        taskCompleted\n      )\n      .then((response) => {\n        const taskCompleted = this.state.tasks;\n        // looping through the array of tasks\n        for (let i = 0; i < taskCompleted.length; i++) {\n          const task = taskCompleted[i]; // looking at each individual one & storing it in a variable called task\n          // if the taskID that we're currently iterating over matches taskID passed in\n          if (task.taskID === taskId) {\n            task.completed = !task.completed; // set the boolean value to the opposite of it's current value\n            break;\n          }\n        }\n        this.setState({\n          tasks: taskCompleted,\n        });\n      })\n      //This executes if the .then fails (TRY / CATCH). the app doesn't stop, we just catch the error\n      .catch((error) => {\n        // handle error\n        console.error(error);\n      });\n  };\n\n  deleteTask = (taskId) => {\n    axios\n      .delete(\n        `https://oabkodhmw0.execute-api.eu-west-2.amazonaws.com/dev/tasks/${taskId}`\n      )\n      .then((response) => {\n        // updatedTasks = filtered list of tasks that are not equal to the taskId\n        const updatedTasks = this.state.tasks.filter(\n          (item) => item.taskID !== taskId\n        );\n\n        this.setState({\n          tasks: updatedTasks,\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  //this is new - currently no starred column in database\n  // starTask = (taskId) => {\n  //   const starredTask = this.state.tasks;\n  //   for (let i = 0; i < starredTask.length; i++) {\n  //     const task = [i];\n  //     if (task.id === taskId) {\n  //       task.starred = true;\n  //       break;\n  //     }\n  //   }\n  //   this.setState({\n  //     tasks: starredTask,\n  //   });\n  // };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <Title />\n          </div>\n          <div className=\"col\">\n            <Time />\n          </div>\n        </div>\n\n        <div className=\"row rounded\">\n          <div className=\"col-lg-6 col-md-12 col-sm-12 pt-4 rounded add-task\">\n            <AddTask addTaskFunc={this.addTask} />\n          </div>\n\n          <div className=\"col-lg-6 col-md-12 col-sm-12 rounded task-list\">\n            <TaskCount taskCount={this.state.tasks.length} />\n            <TaskList\n              taskCollection={this.state.tasks}\n              deleteTaskFunc={this.deleteTask}\n              completedTaskFunc={this.completeTask}\n              starTaskFunc={this.starTask}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}