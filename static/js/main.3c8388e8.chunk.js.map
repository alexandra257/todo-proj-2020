{"version":3,"sources":["components/headers/Title.js","components/Time/Time.js","components/task/TaskCount.js","components/task/Task.js","components/task/TaskList.js","components/task/AddTask.js","App.js","serviceWorker.js","index.js"],"names":["title","className","moment","require","format","Time","date","now","useState","time","setTime","setInterval","newTime","style","fontFamily","fontSize","textAlign","TaskCount","this","props","taskCount","React","Component","Task","deleteClicked","deleteTaskFunc","item","taskID","doneClicked","completedTaskFunc","starTaskClick","starTaskFunc","console","log","description","completed","StarButtonOutline","styled","StarBorderIcon","color","CompleteButton","DoneOutlineOutlinedIcon","DeleteButton","DeleteForeverOutlinedIcon","scope","type","onClick","TaskList","taskCollection","map","taskItem","key","AddTask","state","taskDescription","addTask","addTaskFunc","taskDescriptionChanged","event","setState","target","value","placeholder","onChange","App","tasks","componentDidMount","axios","get","then","response","data","catch","error","taskToAdd","user_id","post","taskId","task","currentTasks","push","completeTask","put","taskCompleted","i","length","deleteTask","delete","updatedTasks","filter","starTask","starredTask","id","starred","Title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c8388e8.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction title() {\n  return (\n    <div className=\"row heading\">\n      <p>lotus flow</p>\n    </div>\n  );\n}\n\nexport default title;\n","import React, { useState } from \"react\";\nvar moment = require(\"moment\");\nmoment().format();\n\nfunction Time() {\n  const timeStyle = {\n    fontFamily: \"Dancing Script\",\n    fontSize: \"30px\",\n    textAlign: \"right\",\n  };\n\n  const dateStyle = {\n    fontFamily: \"Dancing Script\",\n    fontSize: \"40px\",\n    textAlign: \"right\",\n  };\n\n  const date = moment().format(\"MMMM Do YYYY\");\n  const now = moment().format(\"h:mm a\");\n\n  const [time, setTime] = useState(now);\n  //this is the function that will update the inital value of the initial state\n  function updateTime() {\n    const newTime = moment().format(\"h:mm a\"); //this will allow us to call a new updated time\n    setTime(newTime); //this is the function we delcared would update our state in the destructured array\n  }\n\n  setInterval(updateTime, 1000);\n\n  return (\n    <div>\n      <p style={timeStyle}>{time}</p>\n\n      <p style={dateStyle}>{date}</p>\n    </div>\n  );\n}\n\nexport default Time;\n","import React from \"react\";\nimport \"./Task.css\";\n\nclass TaskCount extends React.Component {\n  render() {\n    if (this.props.taskCount === 0) {\n      return <h3 className=\"m-3\">Congrats, you can relax! There are no tasks to do.</h3>\n    } else {\n      return (<div className=\"m-3 taskCount\">\n        <h2>Tasks left: {this.props.taskCount}</h2>\n      </div>\n      );\n    }\n\n    // return (\n\n    //   { areThereTasks }\n    // );\n  }\n}\n\nexport default TaskCount;\n","import React from \"react\";\nimport \"./Task.css\";\nimport { styled } from '@material-ui/core/styles';\nimport DeleteForeverOutlinedIcon from '@material-ui/icons/DeleteForeverOutlined';\nimport DoneOutlineOutlinedIcon from '@material-ui/icons/DoneOutlineOutlined';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\n// import StarIcon from '@material-ui/icons/Star';\n\nclass Task extends React.Component {\n  deleteClicked = () => {\n    this.props.deleteTaskFunc(this.props.item.taskID);\n  };\n\n\n  doneClicked = () => {\n    this.props.completedTaskFunc(this.props.item.taskID);\n\n  };\n\n  starTaskClick = () => {\n    this.props.starTaskFunc(this.props.item.taskID);\n    console.log('star was clicked');\n  }\n\n  render() {\n\n    let description;\n    if (this.props.item.completed) {\n      description = <div className=\"completedTask\">{this.props.item.description}</div>\n    } else {\n      description = <div>{this.props.item.description}</div>\n    }\n\n\n\n    const StarButtonOutline = styled(StarBorderIcon)({\n      color: '#feb72b',\n    });\n    // const StarButtonFilled = styled(StarIcon)({\n    //   color: '#feb72b',\n    // });\n    const CompleteButton = styled(DoneOutlineOutlinedIcon)({\n      color: '#5b8c5a'\n    });\n    const DeleteButton = styled(DeleteForeverOutlinedIcon)({\n      color: '#FE6B8B'\n    });\n\n\n\n\n    return (\n      <div className=\"row border rounded task\" >\n        <table className=\"table table-striped\">\n          <thead>\n            <tr>\n              <th scope=\"col\" className=\"priorityCol\"></th>\n              <th scope=\"col\" className=\"descriptionCol\"></th>\n              <th scope=\"col\" className=\"addCol\"></th>\n              <th scope=\"col\" className=\"deleteCol\"></th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <th scope=\"row\">\n                <button type=\"button\" className=\"btn\"><StarButtonOutline onClick={this.starTaskClick} /></button>\n              </th>\n              <td className=\"taskDescription\">{description}</td>\n\n              <td> {!this.props.item.completed && (              //if the task is not completed + the done button is clicked, remove the done button\n                <button type=\"button\"\n                  className=\"btn\">\n                  <CompleteButton onClick={this.doneClicked} />\n                </button>\n              )}</td>\n\n              <td>\n                <button\n                  type=\"button\"\n                  className=\"btn\">\n                  <DeleteButton onClick={this.deleteClicked} />\n                </button></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n    );\n  }\n}\n\nexport default Task;\n","import React from \"react\";\nimport \"./Task.css\";\nimport Task from \"./Task\";\n\nclass TaskList extends React.Component {\n  render() {\n    return (\n      <div className=\"col mb-4 rounded taskBox\">\n        {this.props.taskCollection.map(taskItem => (\n          <Task\n            item={taskItem}\n            key={taskItem.taskID}\n            deleteTaskFunc={this.props.deleteTaskFunc}\n            completedTaskFunc={this.props.completedTaskFunc}\n            starTaskFunc={this.props.starTaskFunc}\n          />\n        ))\n        }\n      </div>\n    );\n  }\n}\n\nexport default TaskList;\n","import React from \"react\";\nimport \"./Task.css\";\n\nclass AddTask extends React.Component {\n\n\n  state = {\n    taskDescription: \"Enter your task...\"\n  }\n\n\n  addTask = () => {\n    this.props.addTaskFunc(this.state.taskDescription);\n  }\n\n\n  taskDescriptionChanged = (event) => {\n    this.setState({\n      taskDescription: event.target.value\n    });\n  }\n\n\n  render() {\n    return (\n      <div className=\"input-group mb-3\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Enter your task here\"\n          onChange={this.taskDescriptionChanged}\n        />\n        <div className=\"input-group-append\">\n          <button className=\"btn btn-outline-primary\" type=\"button\" onClick={this.addTask}>\n            Add\n              </button>\n        </div>\n      </div>\n\n    );\n  }\n}\n\nexport default AddTask;\n","import React from \"react\";\nimport \"./App.css\";\nimport Title from './components/headers/Title';\nimport Time from './components/Time/Time';\nimport TaskCount from \"./components/task/TaskCount\";\nimport TaskList from \"./components/task/TaskList\";\nimport AddTask from \"./components/task/AddTask\";\nimport axios from \"axios\";\n\nclass App extends React.Component {\n  state = {\n    tasks: [\n      // { id: 12345, description: 'this is a task', completed: false, starred: false },\n      // { id: 45678, description: 'this is another task', completed: false, starred: false }\n    ]\n  };\n\n  //this function will fire when the component loads on the screen\n  //this can be used in any component \n  componentDidMount = () => {\n    //FETCH tasks from the API when our app loads \n    //once the get finishes, .then will fire (then is a promise, when get finishes, i promise to get x)\n    axios.get('https://oabkodhmw0.execute-api.eu-west-2.amazonaws.com/dev/tasks')\n      .then((response) => {\n        // handle success\n        this.setState({\n          tasks: response.data.tasks\n        })\n      })\n      //This executes if the .then fails (TRY / CATCH). the app doesn't stop, we just catch the error\n      .catch((error) => {\n        // handle error\n        console.error(error);\n      });\n\n  }\n\n\n  addTask = taskDescription => {\n\n    const taskToAdd = {\n      //no taskID needed because we generate the uuid in the backend\n      description: taskDescription,\n      completed: 0,\n      user_id: \"7096d2b7-e612-4b44-a9e2-8e29fc9bed69\"\n    }\n\n    //tasksToAdd being sent to the backend API as a POST\n    //when it succeeds, console log it\n    //same endpoint as get\n    //passing it our JSON object above (taskToAdd)\n    axios.post('https://oabkodhmw0.execute-api.eu-west-2.amazonaws.com/dev/tasks', taskToAdd)\n      .then((response) => {\n\n        //tells the front end what the taskID is of the task that gets saved\n        taskToAdd.taskId = response.data.task.taskID\n        console.log(taskToAdd);\n\n\n        const currentTasks = this.state.tasks;     //get current list of tasks from state\n        currentTasks.push(taskToAdd);    //add the new task onto the array of tasks in state\n\n        //update state\n        this.setState({\n          tasks: currentTasks\n        });\n\n      })\n\n      .catch((error) => {\n        console.error(error);\n      });\n\n\n  };\n\n\n\n  completeTask = taskId => {\n    const taskCompleted = { completed: 1 }\n\n    axios.put(`https://oabkodhmw0.execute-api.eu-west-2.amazonaws.com/dev/tasks/${taskId}`, taskCompleted)\n      .then((response) => {\n\n        const taskCompleted = this.state.tasks;     //Find task that needs to be updated \n        for (let i = 0; i < taskCompleted.length; i++) { //looping through the array of tasks\n          const task = taskCompleted[i]; //looking at each individual one\n          if (task.taskID === taskId) { //if the task id matches the taskID passed in\n            task.completed = !task.completed;  //mark task completed as true\n            //need to ensure the counter is\n            break;\n          }\n        }\n        this.setState({\n          tasks: taskCompleted\n        });\n      })\n      //This executes if the .then fails (TRY / CATCH). the app doesn't stop, we just catch the error\n      .catch((error) => {\n        // handle error\n        console.error(error);\n      });\n  };\n\n\n  //WE CAN MANIPULATE STATE HERE & SEND API REQUESTS\n  //deleteTask identifies the task with matching id & removes it\n  deleteTask = taskId => {\n    axios.delete(`https://oabkodhmw0.execute-api.eu-west-2.amazonaws.com/dev/tasks/${taskId}`)\n      .then((response) => {\n        // updatedTasks = filtered list of tasks that are not equal to the taskId\n        const updatedTasks = this.state.tasks.filter(item => item.taskID !== taskId);\n\n        this.setState({\n          tasks: updatedTasks\n        });\n      })\n      //This executes if the .then fails (TRY / CATCH). the app doesn't stop, we just catch the error\n      .catch((error) => {\n        // handle error\n        console.error(error);\n      });\n\n\n  };\n\n\n\n  starTask = taskId => {\n    const starredTask = this.state.tasks;\n    for (let i = 0; i < starredTask.length; i++) {\n      const task = [i];\n      if (task.id === taskId) {\n        task.starred = true;\n        break;\n      }\n    }\n    this.setState({\n      tasks: starredTask\n    })\n    // console.log('task was starred');\n  };\n\n\n\n\n  render() {\n    return (\n      <div className=\"container\">\n\n\n        <div className=\"row\">\n          <div className=\"col\">\n            <Title />\n          </div>\n          <div className=\"col\">\n            <Time />\n          </div>\n        </div>\n\n\n\n        <div className=\"row rounded\">\n\n          <div className=\"col-lg-6 col-md-12 col-sm-12 rounded addTask\">\n            <h2>Add a task: </h2>\n            <AddTask addTaskFunc={this.addTask} />\n          </div>\n\n          <div className=\"col-lg-6 col-md-12 col-sm-12 rounded taskList\">\n            <TaskCount taskCount={this.state.tasks.length} />\n            <TaskList\n              taskCollection={this.state.tasks}\n              deleteTaskFunc={this.deleteTask}\n              completedTaskFunc={this.completeTask}\n              starTaskFunc={this.starTask}\n            />\n\n          </div>\n        </div>\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}